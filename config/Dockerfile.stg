FROM golang:1.23-alpine

ENV TZ=America/Argentina/Buenos_Aires

RUN apk add --no-cache \
    tzdata \
    sqlite \
    sqlite-dev \
    gcc \
    musl-dev

WORKDIR /app

COPY . .

RUN go mod download && go mod verify

RUN CGO_ENABLED=1 GOOS=linux go build -o /app/customer-manager \
    ./projects/tech-house/customer-manager-challenge/cmd/api/main.go

EXPOSE 8080

CMD ["/app/customer-manager"]

# NOTE: probar porque no lee las envs
# Build stage
# FROM golang:1.23-alpine AS builder

# # Configurar zona horaria
# ENV TZ=America/Argentina/Buenos_Aires

# # Instalar dependencias de compilación
# RUN apk add --no-cache \
#     tzdata \
#     sqlite \
#     sqlite-dev \
#     gcc \
#     musl-dev

# WORKDIR /build

# # Copiar solo los archivos necesarios para descargar dependencias
# COPY go.mod go.sum ./
# RUN go mod download && go mod verify

# # Copiar el resto del código fuente
# COPY . .

# # Compilar la aplicación
# RUN CGO_ENABLED=1 GOOS=linux go build -o /build/customer-manager \
#     ./projects/tech-house/customer-manager-challenge/cmd/api/main.go

# # Final stage
# FROM alpine:latest

# # Configurar zona horaria
# ENV TZ=America/Argentina/Buenos_Aires

# # Instalar solo las dependencias de runtime necesarias
# RUN apk add --no-cache \
#     tzdata \
#     sqlite

# WORKDIR /app

# # Copiar el binario compilado y otros archivos necesarios
# COPY --from=builder /build/customer-manager .

# # Configurar usuario no root por seguridad
# RUN adduser -D appuser
# USER appuser

# EXPOSE 8080

# CMD ["./app/customer-manager"]